// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  password          String
  firstName         String
  lastName          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  profile           Profile?
  moodEntries       MoodEntry[]
  journalEntries    JournalEntry[]
  therapistSessions TherapistSession[]
  messages          Message[]
  groupMemberships  CommunityMember[]
  articleBookmarks  ArticleBookmark[]
}

model Profile {
  id             String   @id @default(uuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatarUrl      String?
  bio            String?
  origin         String?
  currentCountry String?
  interests      String[]
  languages      String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model MoodEntry {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mood        String   // e.g., "happy", "sad", "anxious", "neutral"
  intensity   Int      // 1-5 scale
  note        String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model JournalEntry {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Therapist {
  id               String             @id @default(uuid())
  email            String             @unique
  password         String
  firstName        String
  lastName         String
  bio              String?
  specialties      String[]
  languages        String[]
  avatarUrl        String?
  isVerified       Boolean            @default(false)
  sessions         TherapistSession[]
  availabilities   Availability[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Availability {
  id          String     @id @default(uuid())
  therapistId String
  therapist   Therapist  @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  dayOfWeek   Int        // 0-6 (Sunday-Saturday)
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model TherapistSession {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  therapistId String
  therapist   Therapist @relation(fields: [therapistId], references: [id], onDelete: Cascade)
  startTime   DateTime
  endTime     DateTime
  status      String    // "scheduled", "completed", "cancelled"
  notes       String?
  type        String    // "video", "chat"
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id          String            @id @default(uuid())
  content     String
  senderId    String
  sender      User              @relation(fields: [senderId], references: [id], onDelete: Cascade)
  sessionId   String
  session     TherapistSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Community {
  id          String            @id @default(uuid())
  name        String
  description String
  imageUrl    String?
  isPublic    Boolean           @default(true)
  members     CommunityMember[]
  posts       CommunityPost[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model CommunityMember {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  role        String    // "member", "moderator", "admin"
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, communityId])
}

model CommunityPost {
  id          String       @id @default(uuid())
  communityId String
  community   Community    @relation(fields: [communityId], references: [id], onDelete: Cascade)
  authorId    String
  title       String
  content     String
  comments    Comment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Comment {
  id        String        @id @default(uuid())
  postId    String
  post      CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  content   String
  authorId  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Article {
  id        String            @id @default(uuid())
  title     String
  content   String
  authorId  String
  summary   String?
  imageUrl  String?
  tags      String[]
  bookmarks ArticleBookmark[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model ArticleBookmark {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}
